from openai import OpenAI
from dotenv import load_dotenv
import os

from utils.db_connection import guardar_hash_prompt, historial_prompts_hashes, obtener_datos_campania

# Cargar variables de entorno
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("‚ö†Ô∏è ERROR: OPENAI_API_KEY no est√° definida en .env")

config_por_campania = {
    "quick_cleaning": {
        "rol_protagonista": "personal de limpieza profesional",
        "apariencia": "personal de limpieza"
    },
    "osceola_fence_corporation": {
        "rol_protagonista": "trabajador o constructor",
        "apariencia": "Viste gorra con logo, polo de la empresa y pantalones cargo con m√∫ltiples bolsillos; completa su equipo con guantes resistentes, botas antideslizantes y un cintur√≥n que sostiene alicates, metro y tensores para instalar postes y tensar alambres con precisi√≥n."
    },
    "elite_chicago_spa": {
        "rol_protagonista": "esteticista, mujer joven",
        "apariencia": "manos y u√±as muy bien arregladas"
    },
    "lopez_y_lopez_abogados": {
        "rol_protagonista": "abogado o abogada profesional",
        "apariencia": "traje formal oscuro, escritorio con documentos legales y laptop"
    },
     "spa312": {
        "rol_protagonista": "terapeuta de spa",
        "apariencia": "personal en un ambiente de relajaci√≥n",
    },
     "elite_frenchies": {
        "rol_protagonista": "criador profesional de bulldogs franceses",
        "apariencia": "persona en ambiente hogare√±o con cachorros Frenchie alrededor",
    },
}

def obtener_configuracion_por_campania(campaign_key):
    if "botanica" in campaign_key.lower() or "bot√°nica" in campaign_key.lower():
        return {
            "rol_protagonista": "cham√°n o brujo",
            "apariencia": "brujo con vestimenta de cham√°n",
            "sonido_especial": "efectos sobrenaturales, de terror, intriga o sonidos de ritual, no usar musica animada"
        }
    
    for clave, valores in config_por_campania.items():
        if clave in campaign_key:
            return valores

    return {
        "rol_protagonista": "persona principal",
        "apariencia": "vestimenta y elementos acordes al servicio"
    }


class GPT:
    def __init__(self, tema, language, servicio, campaign_key, canal, tipo, descripcion, sonido, main_cta_final, hashtags):
        self.client = OpenAI(api_key=OPENAI_API_KEY)
        self.tema = tema
        self.lang = language
        self.servicio = servicio
        self.campaign_key = campaign_key
        self.campaign_name = campaign_key.replace("_", " ").title()
        self.canal = canal
        self.tipo = tipo.strip().lower() 
        self.descripcion = descripcion
        self.sonido = sonido
        self.hashtags = hashtags
        self.main_cta_final = main_cta_final
        self.SYSTEM_MESSAGE = f"Eres un sistema que genera ideas √∫nicas de contenido de video de alta calidad. Siempre responde **exclusivamente** en {self.lang}, sin usar ning√∫n otro idioma bajo ninguna circunstancia."
        self.ASSISTANT_MESSAGE = "Eres un asistente que ayuda a crear ideas unicas, atractivas para videos comerciales."
        self.prompts_activados = False
        
    def create_message(self, role, content):
        if not self.prompts_activados:
            print("‚ö†Ô∏è Prompts desactivados por configuraci√≥n.")
            return ""
    
        return {"role": role, "content": content}

    def generate_response(self, model, messages, temperature=1):
        if not self.prompts_activados:
            print("‚ö†Ô∏è Prompts desactivados por configuraci√≥n.")
            return ""
        
        response = self.client.chat.completions.create(
            model=model, messages=messages, temperature=temperature
        )
        return response.choices[0].message.content.strip()

    def generar_prompt_base(self):
        if not self.prompts_activados:
            print("‚ö†Ô∏è Prompts desactivados por configuraci√≥n.")
            return ""
        
        
        if "botanica" in self.campaign_key.lower() or "bot√°nica" in self.campaign_key.lower():
            self.SYSTEM_MESSAGE = f"Eres un sistema espiritual que genera contenido m√≠stico e informativo. Siempre responde exclusivamente en el idioma de {self.lang}."
            
        perfil_vis = obtener_configuracion_por_campania(self.campaign_key)
        rol = perfil_vis["rol_protagonista"]
        apariencia = perfil_vis["apariencia"]
        sonido_especial = perfil_vis.get("sonido_especial")
        extra_visual = "Aseg√∫rate de que las escenas visuales sean completamente distintas, mostrando nuevos lugares, encuadres y acciones. No reutilices secuencias comunes o de stock gen√©rico."

        if self.tipo == "asmr":
            return f"""
        üß† **Brief para video ASMR ultra detallado ‚Äì duraci√≥n: 30 segundos**  
        Idioma del video: **{self.lang}**  
        Tema principal: **{self.descripcion}**

        üéØ **Objetivo:**  
        Crear un video ASMR donde **cada acci√≥n visual genere de inmediato un sonido espec√≠fico y natural que coincida perfectamente**.  
        No se permiten sonidos flotantes sin fuente clara en pantalla. El espectador debe identificar con exactitud qu√© produce cada sonido, c√≥mo y cu√°ndo.

        üß© **Estructura por bloque (obligatoria):**

        1. üé• **VISUAL**  
        ‚Äì Describe claramente una acci√≥n o interacci√≥n f√≠sica (ej: ‚Äúuna mano roza hojas secas lentamente‚Äù).  
        ‚Äì Indica objeto, textura, movimiento, ritmo y entorno.  
        ‚Äì Toda imagen debe generar un **sonido identificable**, y este debe estar descrito justo despu√©s.

        2. üîä **SONIDO ASOCIADO**  
        ‚Äì Describe el **sonido que surge exactamente de la acci√≥n anterior** (ej: ‚Äúcrujido seco de hojas, canal derecho, 50 Hz, suave, 10 cm del micr√≥fono‚Äù).  
        ‚Äì Detalla canal (izq/der), distancia al micr√≥fono, volumen, tipo (susurro, golpe, roce), duraci√≥n y efectos (eco, reverb).  
        ‚Äì NO inventes sonidos sin una acci√≥n f√≠sica visual clara.

        3. üß† **COHERENCIA AUDIOVISUAL**  
        ‚Äì Indica claramente **el momento exacto** de inicio del sonido respecto al movimiento.  
        ‚Äì Si el sonido persiste, menciona si la imagen se mantiene est√°tica, en loop, o cambia.

        üö´ **Prohibido:**  
        ‚Äì Im√°genes sin sonido.  
        ‚Äì Sonidos sin acci√≥n visible que los justifique.  
        ‚Äì M√∫sica de fondo.  
        ‚Äì Repeticiones de escenas.  
        ‚Äì Transiciones o cortes r√°pidos.

        üìé **Notas adicionales para la IA**  
        ‚Äì Este video ser√° generado con inteligencia artificial que necesita correspondencia 1:1 entre lo que se ve y lo que se oye.  
        ‚Äì No usar met√°foras ni planos abstractos.  
        ‚Äì El espectador debe poder ‚Äúadivinar‚Äù qu√© est√° sonando solo con mirar la imagen.

        üßæ **Instrucci√≥n t√©cnica**  
        ‚è± **Duraci√≥n:** 50 segundos  
        Genera al menos 5 bloques consecutivos que sigan esta estructura con sonidos variados.  
        Todo el contenido debe ajustarse a una duraci√≥n total de 30 segundos.

        {extra_visual}
        """

        
        # Tipo especial Documental o Storytime
        if self.tipo in ["documental", "storytime"]:
            return f"""
            üéØ **Objetivo:** Crear un guion hiperrealista exclusivamente en el idioma de **{self.lang}** para un video tipo **{self.tipo}** basado en la empresa **{self.campaign_name}** y el tema: **{self.descripcion}**.
            üö´ **Prohibido usar cualquier palabra, instrucci√≥n o frase en otro idioma distinto a {self.lang}.**

            üìå **Pautas espec√≠ficas**:
            ‚Äì Describe el lugar, acciones y procedimientos con **detalle cinematogr√°fico**.  
            ‚Äì El relato debe incluir **emociones reales** de la protagonista: antes, durante y despu√©s.  
            ‚Äì **No incluir textos, logotipos ni gr√°ficos en pantalla.**  
            ‚Äì El ambiente debe sentirse aut√©ntico, no exagerado ni ficticio.  
            ‚Äì **Usa exactamente el nombre:** **{self.campaign_name}** (sin modificar, traducir o abreviar).
            - La musica de fondo debe tener relaci√≥n con {self.sonido}

            ‚è± **Duraci√≥n del video:** 60 segundos  
            üîÑ **Evita repeticiones:** No repitas secuencias ya utilizadas.  
            {extra_visual}
            """

        if self.tipo == "tips":
            return f"""
            üéØ **Objetivo:** Generar un guion detallado exclusivamente en el idioma de **{self.lang}** para un video de consejos pr√°cticos sobre: **{self.descripcion}**.
            üö´ **Prohibido usar cualquier palabra, instrucci√≥n o frase en otro idioma distinto a {self.lang}.**

            üìå **Instrucciones obligatorias**:
            ‚Äì La protagonista es una trabajadora de la empresa **{self.campaign_name}** (usa siempre este nombre **sin modificar**).  
            ‚Äì Lleva **delantal verde** y **guantes amarillos**.  
            ‚Äì Presenta un **procedimiento paso a paso**, usando herramientas comunes y con **resultado visual claro**.  
            ‚Äì El estilo visual debe tener:
            ‚Ä¢ Toma inicial del problema  
            ‚Ä¢ Transformaci√≥n fluida  
            ‚Ä¢ Primeros planos, efectos suaves  
            ‚Äì **No mostrar marcas, textos ni logotipos.**
            - La musica de fondo debe tener relaci√≥n con {self.sonido}

            üîÅ **Elemento viral:** Truco visual simple, √∫til y sorprendente.  
            ‚è± **Duraci√≥n:** 50 segundos  
            üìπ **Coherencia m√°xima:** Voz, imagen y sonido deben sincronizarse sin distracciones externas.  
            üîÑ **Evita repeticiones:** No uses escenas ya empleadas.  
            {extra_visual}
            """

        
        if self.tipo == "demo":
            return f"""
            üéØ **Objetivo:** Generar un guion extremadamente detallado exclusivamente en el idioma de **{self.lang}** para un video tipo DEMO titulado: **{self.descripcion}**.
            üö´ **Prohibido usar cualquier palabra, instrucci√≥n o frase en otro idioma distinto a {self.lang}.**

            üìå **Especificaciones obligatorias**:
            ‚Äì Muestra a una persona con vestimenta adecuada realizando un proceso paso a paso.  
            ‚Äì Enf√≥cate en el **cambio visual**: antes vs despu√©s.  
            ‚Äì **T√©cnica:** mostrar aplicaci√≥n del producto, acci√≥n (frotar, limpiar, calentar), y resultado visible.  
            ‚Äì Estilo visual:
            ‚Ä¢ Pantalla dividida: izquierda "antes", derecha "despu√©s"  
            ‚Ä¢ M√∫sica en tendencia sincronizada con los momentos clave o musica especificada como {self.sonido} 
            ‚Ä¢ Texto animado sutil con {self.hashtags} (sin logos)

            ‚è± **Duraci√≥n:** 50 segundos  
            üéØ **Prohibido:** No incluir logotipos ni marcas.  
            üîÑ **Evita repeticiones:** No reciclar escenas previas.  
            {extra_visual}
            """

        
        return f"""
            üéØ **Objetivo:** Generar un guion **muy detallado** exclusivamente en el idioma de **{self.lang}** para un video tipo **{self.tipo}** sobre: **{self.descripcion}**.
            üö´ **Prohibido usar cualquier palabra, instrucci√≥n o frase en otro idioma distinto a {self.lang}.**

            üìå **Pautas esenciales**:
            ‚Äì Empresa: **{self.campaign_name}** (usa el nombre tal como est√°, sin traducir ni alterar).  
            ‚Äì Duraci√≥n total: 50 segundos  
            ‚Äì Protagonista: **{rol}**, apariencia: **{apariencia}**

            üìã **Formato de salida (tabla)**:
            | Tiempo | VISUAL | AUDIO | VOZ EN OFF | TEXTO EN PANTALLA |
            |--------|--------|--------|--------------|--------------------|
            ‚Ä¢ **VISUAL:** planos, lentes, movimientos, iluminaci√≥n, objetos  
            ‚Ä¢ **AUDIO:** m√∫sica, sonidos con rango de frecuencias y volumen estimado (usa {sonido_especial or self.sonido})
            ‚Ä¢ **VOZ EN OFF:** di√°logo exacto del narrador incluyendo el nombre de la empresa cuando sea necesario  
            ‚Ä¢ **TEXTO:** tipograf√≠as, tama√±os, colores y animaciones (sin logos)

            üìå Estilo: hiperrealista, sincronizado entre voz, imagen y audio  
            üö´ Prohibido: marcas, textos decorativos o elementos que alteren la neutralidad visual  
            üîÑ Evita escenas ya utilizadas.  
            {extra_visual}
             
            ---

            ### ‚ú® Estructura sugerida (tabla con bloques por tiempo):

            | Tiempo     | Contenido                                                                 |
            |------------|---------------------------------------------------------------------------|
            | 0‚Äì[a] s    | **INTRO + HOOK**:<br>  
                        ‚Äì VISUAL: ...<br>  
                        ‚Äì AUDIO: ...<br>  
                        ‚Äì VOZ EN OFF: ... (menciona **{self.campaign_name}**)<br>  
                        ‚Äì TEXTO EN PANTALLA: ... |
            | [a]‚Äì[b] s  | **Paso 1: [T√≠tulo paso 1]**<br>  
                        ‚Äì VISUAL: ...<br>  
                        ‚Äì AUDIO: ...<br>  
                        ‚Äì VOZ EN OFF: ...<br>  
                        ‚Äì TEXTO EN PANTALLA: ... |
            | [b]‚Äì[c] s  | **Paso 2: [T√≠tulo paso 2]**<br>  
                        ‚Äì VISUAL: ...<br>  
                        ‚Äì AUDIO: ...<br>  
                        ‚Äì VOZ EN OFF: ...<br>  
                        ‚Äì TEXTO EN PANTALLA: ... |
            | [y]‚Äì[z] s  | **CTA + Hashtags**<br>  
                        ‚Äì VISUAL: ...<br>  
                        ‚Äì AUDIO: ...<br>  
                        ‚Äì VOZ EN OFF: ...<br>  
                        ‚Äì TEXTO EN PANTALLA: {self.hashtags} |
            """

    def formatear_prompt_estilo(self, guion_detallado):
            if not self.prompts_activados:
                print("‚ö†Ô∏è Prompts desactivados por configuraci√≥n.")
                return ""
        
            """Aplica el formato t√©cnico tipo SCENE INSTRUCTIONS al guion generado"""
            return f"""
            üéØ **Tarea:** Transforma el guion generado en un formato t√©cnico tipo **SCENE INSTRUCTIONS**, siguiendo estrictamente las especificaciones estructurales exclusivamente en el idioma de {self.lang}.

            üìã **Formato requerido** (no debe modificarse):

            [SCENE INSTRUCTIONS]

            Cada bloque debe incluir lo siguiente, sin excepci√≥n:

            ---
            ### **[0:00‚Äì0:04] Nombre de la escena**
            - **VISUAL**:  
            Describe el plano exacto, tipo de lente (en mm), iluminaci√≥n, c√°mara (fps si aplica), textura o movimiento relevante.
            - **AUDIO**:  
            - **Frecuencias dominantes** (en Hz)  
            - **Panoramizaci√≥n** (L/R o centro, y transici√≥n si aplica)  
            - **Din√°mica**: indica dB iniciales y comportamiento (pico, decaimiento, etc.)
            - **Capas adicionales o efectos**: EQ, reverb, delays, loops.
            - **TEXTO EN PANTALLA**:  
            Texto literal, fuente, tama√±o en pt, color, animaci√≥n (fade-in, rebote, goteo, etc.)

            üîÅ **Duraci√≥n por bloque**: 4 segundos  
            üß† **Importante**:
            ‚Äì Aseg√∫rate de que todos los elementos visuales y auditivos sean **coherentes entre s√≠**.  
            ‚Äì No inventes nombres de escena irreales: deben representar acciones concretas.  
            ‚Äì Mant√©n consistencia sonora (frecuencias realistas, efectos posibles)  
            ‚Äì **No repitas efectos o planos ya utilizados** en bloques anteriores.  
            ‚Äì Usa lenguaje t√©cnico y descriptivo.

            ---

            üîß **Aplica esto a todo el guion detallado que se muestra a continuaci√≥n:**

            {guion_detallado}
            """


    def generate_video_prompt(self):
        if not self.prompts_activados:
            print("‚ö†Ô∏è GPT desactivado ‚Äî usando tema por defecto.")
            return f"""üé¨ Video tipo {self.tipo} sobre "{self.tema}" para {self.campaign_name}.   #Esta parte es justamente para no activaar gpt 
            Visual: antes y despu√©s de {self.servicio}.
            Audio: usar sonido sugerido ({self.sonido}).
            Texto: {self.main_cta_final}.
            Hashtags: {self.hashtags}"""
            
            
        perfil = obtener_datos_campania(self.campaign_key)
        if not perfil:
            raise ValueError(f"‚ùå No se encontr√≥ perfil de campa√±a para: {self.campaign_key}")

        business_type, city, suggested_tone, target_audience, voice = perfil
        print(f"[üîë] Campa√±a recibida: {self.campaign_key}")
        print(f"[‚úÖ] Perfil encontrado: {perfil}")

        # Etapa 1: generar prompt base seg√∫n tipo
        prompt_tipo = self.generar_prompt_base()
        messages_1 = [
            self.create_message("system", self.SYSTEM_MESSAGE),
            self.create_message("assistant", self.ASSISTANT_MESSAGE),
            self.create_message("user", prompt_tipo),
        ]
        guion_base = self.generate_response("gpt-4", messages_1)
        
        # üß† Verificaci√≥n anti-duplicado
        prompt_checksum = hash(guion_base)
        if prompt_checksum in historial_prompts_hashes(self.campaign_key):
            print("‚ö†Ô∏è Prompt similar a uno ya usado. Regenerando...")
            return self.generate_video_prompt()

        guardar_hash_prompt(self.campaign_key, prompt_checksum)


        # Si es tipo especial, formatearlo como SCENE INSTRUCTIONS
        if self.tipo in ["asmr", "documental", "storytime"]:
            prompt_formato = self.formatear_prompt_estilo(guion_base)
            messages_2 = [
                self.create_message("system", self.SYSTEM_MESSAGE),
                self.create_message("assistant", self.ASSISTANT_MESSAGE),
                self.create_message("user", prompt_formato),
            ]
            return self.generate_response("gpt-4", messages_2)

        # Si es tipo general, devolver solo el guion
        return guion_base
